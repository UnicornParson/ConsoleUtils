#!/usr/bin/env python3

import numpy as np
import cv2
import os
import sys
import datetime
import os.path
from enum import Enum
import tqdm
from numba import njit
import math
import argparse

from common import *

def fpsStart():
	return datetime.datetime.now()

def fpsUpdate(marker, count):
	tdelta = datetime.datetime.now() - marker
	fps = float(count) / tdelta.total_seconds()
	return (fps, tdelta.total_seconds(), datetime.datetime.now())

def normalizeRmse(rmse: float) -> float:
	return math.sqrt(math.fabs(rmse)) / 255.0

@njit(fastmath=True)
def processFrame(gray, diff1, w: int, h: int):
	marker = [0, 0, 255]
	palette = [[31,31,229],[52,161,242],[211,227,247],[68,219,187],[27,206,68]]
	counts = []
	total = w * h
	tStep = 5
	summ = .0
	for t in range(0, 50, tStep):
		count = 0
		mi = int(t / 10)
		marker = palette[mi]
		for y in range(0, h):
			for x in range(0, w):
				for ch in range(0, 3):
					if (diff1[y, x, ch] > t):
						if t == 0:
							summ += diff1[y, x, ch] ** 2
						gray[y, x] = marker
						count += 1
					break
		counts.append((t, count))
	rmse = summ / float(total)
	return gray, counts, total, rmse

def drawHeader(target, w: int, h: int, counts: list, total: int, rmse: float):
	target[0:h, 0:w] = 0
	font = cv2.FONT_HERSHEY_PLAIN
	margin = 3
	fontScale = 1
	# color in BGR
	color = (255, 255, 255)
	thickness = 1
	text = ""
	if total > 0:
		for c in counts:
			t = c[0]
			prc = int(float(c[1]) / total * 100.)
			text += "[%d_%d%%]" % (t, prc)
	image = cv2.putText(target, text, (margin, h - margin), font, fontScale, color, thickness, cv2.LINE_AA, False)
	image = cv2.putText(target, ("RMSE:%f" % normalizeRmse(rmse)), (int(margin), int((h/2) - margin)), font, fontScale, color, thickness, cv2.LINE_AA, False)
	return image

def drawFooter(target, y:int, w: int, h: int, rmse: float):
	target[y:(y+h),0:w] = 0
	margin = 3
	bar_h = 8
	start_point = (margin, y + margin)
	bar_w = w - (2*margin)
	end_point = ((bar_w + margin), (y + margin + bar_h))
	in_end_point = ((int(bar_w*normalizeRmse(rmse)) + margin), (y + margin + bar_h))
	color = (255, 255, 255)
	thickness = 1

	image = cv2.rectangle(target, start_point, in_end_point, color, -1)
	image = cv2.rectangle(image, start_point, end_point, color, thickness)
	return image

def processVideo(inParh: str, outPath: str) -> bool:
	headerHeight = 64
	footerHeight = 24

	mprint("processVideo %s -> %s" %(inParh, outPath))
	videoin=cv2.VideoCapture(inParh)

	videoin=cv2.VideoCapture(inParh)
	totalCount = int(videoin.get(cv2.CAP_PROP_FRAME_COUNT))
	if not videoin.isOpened():
		mprint("Could not open video device")
		return False
	width  = int(videoin.get(cv2.CAP_PROP_FRAME_WIDTH))   # float `width`
	height = int(videoin.get(cv2.CAP_PROP_FRAME_HEIGHT))  # float `height`

	fps = videoin.get(cv2.CAP_PROP_FPS)
	if os.path.exists(outPath):
		mprint("file exists, remove")
		os.remove(outPath)
	outHeight = height + headerHeight + footerHeight
	outWidth = width

	videoout = cv2.VideoWriter(outPath,cv2.VideoWriter_fourcc(*'mp4v'), fps, (outWidth, outHeight))
	last = None
	mprint("start. in %d/%d frames count: %d"% (width, height, totalCount))
	out = np.zeros((outHeight, outWidth, 3), dtype = np.uint8)
	for _ in tqdm.tqdm(range(0, totalCount)):
		ret, frame = videoin.read()
		if not ret:
			mprint("%s done" % inParh)
			break
		gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
		gray = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR)
		total = width * height
		counts = []
		rmse = .0
		if last is not None:
			diff1 = cv2.absdiff(frame, last)
			gray, counts, total, rmse = processFrame(gray, diff1, width, height)

		out[headerHeight:headerHeight+height, 0:width] = gray
		out = drawHeader(out, width, headerHeight, counts, total, rmse)
		out = drawFooter(out, headerHeight+height, width, footerHeight, rmse )
		videoout.write(out)
		last = frame
	videoout.release()
	return True

def main() -> int :
	parser = argparse.ArgumentParser(add_help=True, description="frozen frames detector")
	parser.add_argument("inpath", help="original file")
	parser.add_argument("outpath", help="target file", default="", nargs='?')


	args = parser.parse_args()
	seed = str(mstime())
	if not os.path.isfile(args.inpath):
		eprint("no input file")
		return -1
	target = args.outpath.strip()
	if not target:
		target = args.inpath + ".fdiff.mp4"

	rc = processVideo(args.inpath, target)

	if rc:
		return 0
	return -1


if __name__ == '__main__':
	sys.exit(main())